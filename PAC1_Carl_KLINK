{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "691d29e6-cebb-445a-b16a-e1ca8f3a36c6",
   "metadata": {},
   "source": [
    "# Exercise 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "b6f6333b-6582-4f72-9efe-1a2fe34f1884",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>postid</th>\n",
       "      <th>parentid</th>\n",
       "      <th>communityidentityid</th>\n",
       "      <th>communityname</th>\n",
       "      <th>timestamps</th>\n",
       "      <th>followers</th>\n",
       "      <th>ratings_pos</th>\n",
       "      <th>ratings_neg</th>\n",
       "      <th>articleid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1081262038</td>\n",
       "      <td>NaN</td>\n",
       "      <td>693393.0</td>\n",
       "      <td>Verrückter Hodenkobold</td>\n",
       "      <td>1636112262</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000090440224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1081122567</td>\n",
       "      <td>NaN</td>\n",
       "      <td>702139.0</td>\n",
       "      <td>abracadabraham</td>\n",
       "      <td>1635938358</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1081112234</td>\n",
       "      <td>NaN</td>\n",
       "      <td>499562.0</td>\n",
       "      <td>betterknower</td>\n",
       "      <td>1635929158</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1081116895</td>\n",
       "      <td>1.081112e+09</td>\n",
       "      <td>175387.0</td>\n",
       "      <td>Otto Maximalverbraucher</td>\n",
       "      <td>1635933163</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1081103974</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91850.0</td>\n",
       "      <td>Heinz Anderle</td>\n",
       "      <td>1635919081</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1081096654</td>\n",
       "      <td>NaN</td>\n",
       "      <td>786812.0</td>\n",
       "      <td>Ilsa Lund</td>\n",
       "      <td>1635885738</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1081094702</td>\n",
       "      <td>NaN</td>\n",
       "      <td>237188.0</td>\n",
       "      <td>Symlink</td>\n",
       "      <td>1635882908</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1081095849</td>\n",
       "      <td>1.081095e+09</td>\n",
       "      <td>31503.0</td>\n",
       "      <td>burli</td>\n",
       "      <td>1635884517</td>\n",
       "      <td>31.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1081088387</td>\n",
       "      <td>NaN</td>\n",
       "      <td>574677.0</td>\n",
       "      <td>gmiatlich ...</td>\n",
       "      <td>1635876348</td>\n",
       "      <td>52.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1081086849</td>\n",
       "      <td>NaN</td>\n",
       "      <td>290760.0</td>\n",
       "      <td>°|°</td>\n",
       "      <td>1635874872</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       postid      parentid  communityidentityid            communityname  \\\n",
       "0  1081262038           NaN             693393.0   Verrückter Hodenkobold   \n",
       "1  1081122567           NaN             702139.0           abracadabraham   \n",
       "2  1081112234           NaN             499562.0             betterknower   \n",
       "3  1081116895  1.081112e+09             175387.0  Otto Maximalverbraucher   \n",
       "4  1081103974           NaN              91850.0            Heinz Anderle   \n",
       "5  1081096654           NaN             786812.0                Ilsa Lund   \n",
       "6  1081094702           NaN             237188.0                  Symlink   \n",
       "7  1081095849  1.081095e+09              31503.0                    burli   \n",
       "8  1081088387           NaN             574677.0            gmiatlich ...   \n",
       "9  1081086849           NaN             290760.0                      °|°   \n",
       "\n",
       "   timestamps  followers  ratings_pos  ratings_neg      articleid  \n",
       "0  1636112262        3.0            0            0  2000090440224  \n",
       "1  1635938358        1.0            0            0  2000119861590  \n",
       "2  1635929158        9.0            2            0  2000119861590  \n",
       "3  1635933163       27.0            0            0  2000119861590  \n",
       "4  1635919081      169.0            0            0  2000119861590  \n",
       "5  1635885738        1.0            0            1  2000119861590  \n",
       "6  1635882908        2.0            1            0  2000119861590  \n",
       "7  1635884517       31.0            7            0  2000119861590  \n",
       "8  1635876348       52.0            1            0  2000119861590  \n",
       "9  1635874872        2.0            0            1  2000119861590  "
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset into a DataFrame\n",
    "df = pd.read_csv(\"D:/Donwloads/DATA 1/cat_metadata_11_21.csv\",sep=\"\\t\")  # Replace 'your_dataset.csv' with the actual filename\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "d2186231-8e95-468f-bb1e-21ad75963aac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NaN values per column:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "postid                      0\n",
       "parentid               296428\n",
       "communityidentityid     49971\n",
       "communityname           49971\n",
       "timestamps                  0\n",
       "followers               49971\n",
       "ratings_pos                 0\n",
       "ratings_neg                 0\n",
       "articleid                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Show the number of NaN values per column\n",
    "nan_counts = df.isnull().sum()\n",
    "print(\"Number of NaN values per column:\")\n",
    "nan_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "3612b89e-fe82-4a19-b209-4d8f0ea46c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NaN values per column:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "postid                      0\n",
       "parentid               283431\n",
       "communityidentityid         0\n",
       "communityname               0\n",
       "timestamps                  0\n",
       "followers                   0\n",
       "ratings_pos                 0\n",
       "ratings_neg                 0\n",
       "articleid                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove rows containing NaN values in 'communityname' and 'communityidentityid' columns\n",
    "df = df.dropna(subset=['communityname', 'communityidentityid'])\n",
    "nan_counts = df.isnull().sum()\n",
    "print(\"Number of NaN values per column:\")\n",
    "nan_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "474d6470-6f50-46c6-883d-fd4a19be3f9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>postid</th>\n",
       "      <th>parentid</th>\n",
       "      <th>communityidentityid</th>\n",
       "      <th>communityname</th>\n",
       "      <th>timestamps</th>\n",
       "      <th>followers</th>\n",
       "      <th>ratings_pos</th>\n",
       "      <th>ratings_neg</th>\n",
       "      <th>articleid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1081262038</td>\n",
       "      <td>NaN</td>\n",
       "      <td>693393.0</td>\n",
       "      <td>Verrückter Hodenkobold</td>\n",
       "      <td>1636112262</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000090440224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1081122567</td>\n",
       "      <td>NaN</td>\n",
       "      <td>702139.0</td>\n",
       "      <td>abracadabraham</td>\n",
       "      <td>1635938358</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1081112234</td>\n",
       "      <td>NaN</td>\n",
       "      <td>499562.0</td>\n",
       "      <td>betterknower</td>\n",
       "      <td>1635929158</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1081116895</td>\n",
       "      <td>1.081112e+09</td>\n",
       "      <td>175387.0</td>\n",
       "      <td>Otto Maximalverbraucher</td>\n",
       "      <td>1635933163</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1081103974</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91850.0</td>\n",
       "      <td>Heinz Anderle</td>\n",
       "      <td>1635919081</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1081096654</td>\n",
       "      <td>NaN</td>\n",
       "      <td>786812.0</td>\n",
       "      <td>Ilsa Lund</td>\n",
       "      <td>1635885738</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1081094702</td>\n",
       "      <td>NaN</td>\n",
       "      <td>237188.0</td>\n",
       "      <td>Symlink</td>\n",
       "      <td>1635882908</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1081095849</td>\n",
       "      <td>1.081095e+09</td>\n",
       "      <td>31503.0</td>\n",
       "      <td>burli</td>\n",
       "      <td>1635884517</td>\n",
       "      <td>31.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1081088387</td>\n",
       "      <td>NaN</td>\n",
       "      <td>574677.0</td>\n",
       "      <td>gmiatlich ...</td>\n",
       "      <td>1635876348</td>\n",
       "      <td>52.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1081086849</td>\n",
       "      <td>NaN</td>\n",
       "      <td>290760.0</td>\n",
       "      <td>°|°</td>\n",
       "      <td>1635874872</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       postid      parentid  communityidentityid            communityname  \\\n",
       "0  1081262038           NaN             693393.0   Verrückter Hodenkobold   \n",
       "1  1081122567           NaN             702139.0           abracadabraham   \n",
       "2  1081112234           NaN             499562.0             betterknower   \n",
       "3  1081116895  1.081112e+09             175387.0  Otto Maximalverbraucher   \n",
       "4  1081103974           NaN              91850.0            Heinz Anderle   \n",
       "5  1081096654           NaN             786812.0                Ilsa Lund   \n",
       "6  1081094702           NaN             237188.0                  Symlink   \n",
       "7  1081095849  1.081095e+09              31503.0                    burli   \n",
       "8  1081088387           NaN             574677.0            gmiatlich ...   \n",
       "9  1081086849           NaN             290760.0                      °|°   \n",
       "\n",
       "   timestamps  followers  ratings_pos  ratings_neg      articleid  \n",
       "0  1636112262        3.0            0            0  2000090440224  \n",
       "1  1635938358        1.0            0            0  2000119861590  \n",
       "2  1635929158        9.0            2            0  2000119861590  \n",
       "3  1635933163       27.0            0            0  2000119861590  \n",
       "4  1635919081      169.0            0            0  2000119861590  \n",
       "5  1635885738        1.0            0            1  2000119861590  \n",
       "6  1635882908        2.0            1            0  2000119861590  \n",
       "7  1635884517       31.0            7            0  2000119861590  \n",
       "8  1635876348       52.0            1            0  2000119861590  \n",
       "9  1635874872        2.0            0            1  2000119861590  "
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove duplicate rows based on 'postid' column\n",
    "df = df.drop_duplicates(subset='postid')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "id": "04727799-6038-4140-a632-cfc8c47f00e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>postid</th>\n",
       "      <th>parentid</th>\n",
       "      <th>communityidentityid</th>\n",
       "      <th>communityname</th>\n",
       "      <th>timestamps</th>\n",
       "      <th>followers</th>\n",
       "      <th>ratings_pos</th>\n",
       "      <th>ratings_neg</th>\n",
       "      <th>articleid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1081262038</td>\n",
       "      <td>NaN</td>\n",
       "      <td>693393.0</td>\n",
       "      <td>Verrückter Hodenkobold</td>\n",
       "      <td>2021-11-05 11:37:42</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000090440224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1081122567</td>\n",
       "      <td>NaN</td>\n",
       "      <td>702139.0</td>\n",
       "      <td>abracadabraham</td>\n",
       "      <td>2021-11-03 11:19:18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1081112234</td>\n",
       "      <td>NaN</td>\n",
       "      <td>499562.0</td>\n",
       "      <td>betterknower</td>\n",
       "      <td>2021-11-03 08:45:58</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1081116895</td>\n",
       "      <td>1.081112e+09</td>\n",
       "      <td>175387.0</td>\n",
       "      <td>Otto Maximalverbraucher</td>\n",
       "      <td>2021-11-03 09:52:43</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1081103974</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91850.0</td>\n",
       "      <td>Heinz Anderle</td>\n",
       "      <td>2021-11-03 05:58:01</td>\n",
       "      <td>169.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000119861590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098261</th>\n",
       "      <td>1083166695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>235455.0</td>\n",
       "      <td>Ziemlich leichter Stessa</td>\n",
       "      <td>2021-12-01 12:27:09</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000131563118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098262</th>\n",
       "      <td>1083157508</td>\n",
       "      <td>NaN</td>\n",
       "      <td>583663.0</td>\n",
       "      <td>HMDerka</td>\n",
       "      <td>2021-12-01 10:31:37</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2000131563118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098263</th>\n",
       "      <td>1083153313</td>\n",
       "      <td>NaN</td>\n",
       "      <td>745996.0</td>\n",
       "      <td>Chip and Charge</td>\n",
       "      <td>2021-12-01 09:41:08</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2000131563118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098264</th>\n",
       "      <td>1083141767</td>\n",
       "      <td>NaN</td>\n",
       "      <td>795450.0</td>\n",
       "      <td>Dosenmaster</td>\n",
       "      <td>2021-12-01 07:04:21</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2000131563118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1098265</th>\n",
       "      <td>1083137158</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74670.0</td>\n",
       "      <td>gute Antwort</td>\n",
       "      <td>2021-12-01 03:05:25</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000131563118</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1045851 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             postid      parentid  communityidentityid  \\\n",
       "0        1081262038           NaN             693393.0   \n",
       "1        1081122567           NaN             702139.0   \n",
       "2        1081112234           NaN             499562.0   \n",
       "3        1081116895  1.081112e+09             175387.0   \n",
       "4        1081103974           NaN              91850.0   \n",
       "...             ...           ...                  ...   \n",
       "1098261  1083166695           NaN             235455.0   \n",
       "1098262  1083157508           NaN             583663.0   \n",
       "1098263  1083153313           NaN             745996.0   \n",
       "1098264  1083141767           NaN             795450.0   \n",
       "1098265  1083137158           NaN              74670.0   \n",
       "\n",
       "                    communityname          timestamps  followers  ratings_pos  \\\n",
       "0          Verrückter Hodenkobold 2021-11-05 11:37:42        3.0            0   \n",
       "1                  abracadabraham 2021-11-03 11:19:18        1.0            0   \n",
       "2                    betterknower 2021-11-03 08:45:58        9.0            2   \n",
       "3         Otto Maximalverbraucher 2021-11-03 09:52:43       27.0            0   \n",
       "4                   Heinz Anderle 2021-11-03 05:58:01      169.0            0   \n",
       "...                           ...                 ...        ...          ...   \n",
       "1098261  Ziemlich leichter Stessa 2021-12-01 12:27:09       10.0            0   \n",
       "1098262                   HMDerka 2021-12-01 10:31:37        1.0            6   \n",
       "1098263           Chip and Charge 2021-12-01 09:41:08        1.0            4   \n",
       "1098264               Dosenmaster 2021-12-01 07:04:21        0.0            0   \n",
       "1098265              gute Antwort 2021-12-01 03:05:25       14.0            1   \n",
       "\n",
       "         ratings_neg      articleid  \n",
       "0                  0  2000090440224  \n",
       "1                  0  2000119861590  \n",
       "2                  0  2000119861590  \n",
       "3                  0  2000119861590  \n",
       "4                  0  2000119861590  \n",
       "...              ...            ...  \n",
       "1098261            0  2000131563118  \n",
       "1098262            0  2000131563118  \n",
       "1098263            0  2000131563118  \n",
       "1098264            0  2000131563118  \n",
       "1098265            0  2000131563118  \n",
       "\n",
       "[1045851 rows x 9 columns]"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Convert the 'timestamps' column to datetime format\n",
    "df['timestamps']= pd.to_datetime(df['timestamps'], unit='s')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "6506dc08-172f-48b0-9369-a0a4a3103e2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of different usernames: 30798\n",
      "Number of different communityidentityids: 30798\n"
     ]
    }
   ],
   "source": [
    "# Count the number of different usernames\n",
    "num_usernames = df['communityname'].nunique()\n",
    "\n",
    "# Count the number of different communityidentityids\n",
    "num_community_identity_ids = df['communityidentityid'].nunique()\n",
    "\n",
    "print(\"Number of different usernames:\", num_usernames)\n",
    "print(\"Number of different communityidentityids:\", num_community_identity_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "541aa7a9-7b4f-439e-84a2-d1cf37e727e9",
   "metadata": {},
   "source": [
    "# Exercise 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "17357ce6-d68b-43c5-954f-60d1055da5a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lexic: 2030\n",
      "Götz-48: 1828\n",
      "Franz Weber74: 1642\n",
      "bloody-nine: 1631\n",
      "sellysc: 1591\n",
      "Hortensia die Erste: 1519\n",
      "Amparezeptor: 1440\n",
      "yoghurtinator: 1419\n",
      "gmiatlich ...: 1418\n",
      "Wehklagerin: 1410\n"
     ]
    }
   ],
   "source": [
    "# Count the number of posts made by each community\n",
    "community_post_counts = df['communityname'].value_counts().to_dict()\n",
    "\n",
    "# First 10 entries of the sorted dictionary\n",
    "first_10_entries = {k: community_post_counts[k] for k in list(community_post_counts)[:10]}\n",
    "\n",
    "# Display the first 10 entries of the dictionary (key and value)\n",
    "for community, post_count in first_10_entries.items():\n",
    "    print(f\"{community}: {post_count}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "481adc47-6663-4efa-bdd6-9765ee92ae25",
   "metadata": {},
   "source": [
    "# Exercise 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "76169cb1-4f56-45e7-a1a2-e4160a9e55b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum number of days lexicon has been without posting: 0 days\n"
     ]
    }
   ],
   "source": [
    "def max_days_without_post(dataframe, username, column_name='timestamps'):\n",
    "    # Filter the DataFrame based on the given username\n",
    "    user_df = dataframe[dataframe['communityname'] == username]\n",
    "    \n",
    "    # Calculate the maximum number of days the user has been without posting\n",
    "    if len(user_df) <= 1:\n",
    "        return 0,username  # If only one or no posts, return 0\n",
    "    else:\n",
    "        user_df = user_df.sort_values(by=column_name)\n",
    "        max_days = (user_df[column_name].diff().max()).days\n",
    "        return max_days, username\n",
    "# test for user 'lexicon'\n",
    "max_days,username = max_days_without_post(df, 'lexicon')\n",
    "print(f\"The maximum number of days {username} has been without posting: {max_days} days\")\n",
    "# when it displays 0 days this means that the account either never posted or doesnt exist"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6bdb666-daf0-4eb4-9072-302f0ba2630e",
   "metadata": {},
   "source": [
    "# Exercise 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "id": "c9cd299a-b523-4b69-882f-032af150532f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 10 usernames (sorted alphabetically): ['!!?', '!&$/\"(&%\"!', '!+!=?', '!EswerdeLicht!', '!Yellow Submarine!', '!commentator!', '!integralthinking!', '# Rauber-Hotzenplotz', '#####', '##^^^^°°^^^^##']\n",
      "The username with the greatest number of words in the dataframe is 'Warum seid ihr so blau? Weil wir saufen wie die Sau' with 11 words.\n"
     ]
    }
   ],
   "source": [
    "# Create a list of unique usernames without repetitions\n",
    "usernames = df['communityname'].unique().tolist()\n",
    "\n",
    "# Sort the list alphabetically and display the first 10 values\n",
    "sorted_usernames = sorted(usernames)\n",
    "print(\"First 10 usernames (sorted alphabetically):\", sorted_usernames[:10])\n",
    "\n",
    "# Create a dictionary with usernames and the number of words in each username\n",
    "username_word_count = {username: len(username.split()) for username in usernames}\n",
    "\n",
    "# Determine the username with the greatest number of words\n",
    "max_word_username = max(username_word_count, key=username_word_count.get)\n",
    "max_word_count = username_word_count[max_word_username]\n",
    "\n",
    "# Display the username with the greatest number of words and the count\n",
    "print(f\"The username with the greatest number of words in the dataframe is '{max_word_username}' with {max_word_count} words.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2394a8f-f9a7-4da5-97b7-74379b3e4b2c",
   "metadata": {},
   "source": [
    "# Exercise 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "id": "db8b6a74-b4f8-4cda-ad5f-71ebf51a6183",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of users with usernames containing '-': 768\n",
      "Percentage of users with usernames containing '-': 2.49%\n",
      "Last 10 usernames with '-' in them (alphabetical order):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['xray -',\n",
       " 'yolo-burger',\n",
       " 'ypso-j-neb',\n",
       " 'zFuaß-Geh-dicht',\n",
       " 'zwo-r-pi',\n",
       " '§-§',\n",
       " '°°--°°',\n",
       " 'µ-sam',\n",
       " 'ÖVP-Erwachsenenvertretung',\n",
       " 'ÖVP-Spitzenkandidat Darth Sidious']"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find all users with usernames containing '-'\n",
    "usernames_with_hyphen = [username for username in usernames if '-' in username]\n",
    "\n",
    "# Show the number of users found\n",
    "num_matching_users = len(usernames_with_hyphen)\n",
    "print(\"Number of users with usernames containing '-':\", num_matching_users)\n",
    "\n",
    "# Calculate and show the percentage of these users relative to the total\n",
    "total_users = len(usernames)\n",
    "percentage_matching_users = (num_matching_users / total_users) * 100\n",
    "print(f\"Percentage of users with usernames containing '-': {percentage_matching_users:.2f}%\")\n",
    "\n",
    "# Display the last 10 usernames in alphabetical order\n",
    "last_10_usernames_with_hyphen = sorted(usernames_with_hyphen)\n",
    "print(\"Last 10 usernames with '-' in them (alphabetical order):\")\n",
    "last_10_usernames_with_hyphen[-10:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "f69827e4-4012-4ab1-84c2-2e47aa448477",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of users with usernames consisting of two words containing only letters: 4739\n",
      "Percentage of users with usernames consisting of two words containing only letters: 15.39%\n",
      "First 10 usernames consisting of two words containing only letters (alphabetical order):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['A Therapie',\n",
       " 'A Wanderer',\n",
       " 'A nonymous',\n",
       " 'ABC Guy',\n",
       " 'AI Clover',\n",
       " 'AMS LER',\n",
       " 'Aaron Lopez',\n",
       " 'Abdul Alhazred',\n",
       " 'Aberer Franz',\n",
       " 'Abersaidschan Oida']"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find all users with usernames consisting of two words containing only letters\n",
    "usernames_only_alpha = [username for username in usernames if (lambda x: len(x.split()) == 2 and all(word.isalpha() for word in x.split()))(username)]\n",
    "\n",
    "# Show the number of users with usernames consisting of two words containing only letters\n",
    "num_users_two_words_only_letters = len(usernames_only_alpha)\n",
    "print(\"Number of users with usernames consisting of two words containing only letters:\", num_users_two_words_only_letters)\n",
    "\n",
    "# Calculate and show the percentage of users with usernames consisting of two words containing only letters\n",
    "total_users = len(usernames)\n",
    "percentage_two_words_only_letters = (num_users_two_words_only_letters / total_users) * 100\n",
    "print(\"Percentage of users with usernames consisting of two words containing only letters: {:.2f}%\".format(percentage_two_words_only_letters))\n",
    "\n",
    "# Display the first 10 usernames consisting of two words containing only letters in alphabetical order\n",
    "first_10_usernames_two_words_only_letters = sorted(usernames_only_alpha)\n",
    "print(\"First 10 usernames consisting of two words containing only letters (alphabetical order):\")\n",
    "first_10_usernames_two_words_only_letters[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17c72695-15aa-4055-b2e2-8595a11c63f6",
   "metadata": {},
   "source": [
    "# Exercise 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "04d556c8-7839-4162-aed2-bd44eb884a84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Post ID: 1081009121\n",
      "\tCommunity Name: Berggasse\n",
      "\tDate: 2021-11-01 06:07:23\n",
      "\tArticle ID: 2000130741244\n",
      "\n",
      "Post ID: 1081009148\n",
      "\tCommunity Name: UnholyMartin\n",
      "\tDate: 2021-11-01 06:09:46\n",
      "\tArticle ID: 2000130808008\n",
      "\n",
      "Post ID: 1081009156\n",
      "\tCommunity Name: Bonomax\n",
      "\tDate: 2021-11-01 06:10:01\n",
      "\tArticle ID: 2000130808008\n",
      "\n",
      "Post ID: 1081009185\n",
      "\tCommunity Name: Ironie\n",
      "\tDate: 2021-11-01 06:11:59\n",
      "\tArticle ID: 2000130741244\n",
      "\n",
      "Post ID: 1081009208\n",
      "\tCommunity Name: bakk. noah seydl\n",
      "\tDate: 2021-11-01 06:13:48\n",
      "\tArticle ID: 2000130808008\n",
      "\n",
      "Post ID: 1081009220\n",
      "\tCommunity Name: DerAllesWisser\n",
      "\tDate: 2021-11-01 06:14:38\n",
      "\tArticle ID: 2000130713672\n",
      "\n",
      "Post ID: 1081009223\n",
      "\tCommunity Name: isebuki\n",
      "\tDate: 2021-11-01 06:14:53\n",
      "\tArticle ID: 2000130713672\n",
      "\n",
      "Post ID: 1081009227\n",
      "\tCommunity Name: Hyperkubikwurzel\n",
      "\tDate: 2021-11-01 06:15:02\n",
      "\tArticle ID: 2000130741244\n",
      "\n",
      "Post ID: 1081009232\n",
      "\tCommunity Name: Richter Di\n",
      "\tDate: 2021-11-01 06:15:22\n",
      "\tArticle ID: 2000129066509\n",
      "\n",
      "Post ID: 1081009250\n",
      "\tCommunity Name: peak oil\n",
      "\tDate: 2021-11-01 06:16:11\n",
      "\tArticle ID: 2000130741244\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from collections import OrderedDict\n",
    "\n",
    "def get_top_posts(dataframe, cols, topN=50):\n",
    "    # Extract the specified columns from the DataFrame\n",
    "    subset_df = dataframe[cols]\n",
    "    \n",
    "    # Sort the DataFrame by post ID\n",
    "    sorted_df = subset_df.sort_values(by='postid')\n",
    "    \n",
    "    # Limit the DataFrame to the top N posts\n",
    "    top_df = sorted_df.head(topN)\n",
    "    \n",
    "    # Create an ordered dictionary for the top posts\n",
    "    top_posts = OrderedDict()\n",
    "    for index, row in top_df.iterrows():\n",
    "        post_data = {col: row[col] for col in cols}\n",
    "        top_posts[row['postid']] = post_data\n",
    "    \n",
    "    return top_posts\n",
    "\n",
    "def print_top_posts(top_posts):\n",
    "    # Iterate over the ordered dictionary and print each post's details\n",
    "    for post_id, post_details in top_posts.items():\n",
    "        print(f\"Post ID: {post_id}\")\n",
    "        print(f\"\\tCommunity Name: {post_details['communityname']}\")\n",
    "        print(f\"\\tDate: {post_details['timestamps']}\")\n",
    "        print(f\"\\tArticle ID: {post_details['articleid']}\")\n",
    "        print()\n",
    "\n",
    "# Test the function with topN=10\n",
    "top_10_posts = get_top_posts(df, ['postid', 'communityname', 'timestamps', 'articleid'], topN=10)\n",
    "print_top_posts(top_10_posts)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77435caa-7889-4692-92ff-ae5e8ffdc367",
   "metadata": {},
   "source": [
    "# Exercise 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f6ca50e-fb50-4668-b140-e3d92b9309a5",
   "metadata": {},
   "source": [
    "The data structure that reminds me of the behavior of doing replies to a post, where removing one reply always removes the last one that was done,\n",
    "is a stack.\n",
    "A stack is a Last-In-First-Out (LIFO) data structure, meaning that the last element added to the stack is the first one to be removed. \n",
    "When we add a new reply to the post, it gets pushed onto the top of the stack. \n",
    "Similarly, when we remove a reply, we always remove the most recently added reply, which is the top element of the stack."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "b3118203-0e3a-4278-9d5a-2aa2c786a241",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Remaining comments after removing the last two:\n",
      "234\n",
      "1234\n"
     ]
    }
   ],
   "source": [
    "def create_stack():\n",
    "    return []\n",
    "\n",
    "def push(stack, item):\n",
    "    stack.append(item)\n",
    "\n",
    "def pop(stack):\n",
    "    if not is_empty(stack):\n",
    "        return stack.pop()\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "def is_empty(stack):\n",
    "    return len(stack) == 0\n",
    "\n",
    "# Create a stack to simulate adding and removing comments\n",
    "comment_stack = create_stack()\n",
    "\n",
    "# Simulate adding comments with IDs 1234, 234, 15657, 4656547\n",
    "push(comment_stack, 1234)\n",
    "push(comment_stack, 234)\n",
    "push(comment_stack, 15657)\n",
    "push(comment_stack, 4656547)\n",
    "\n",
    "# Simulate removing the last two comments\n",
    "pop(comment_stack)  # Remove comment with ID 4656547\n",
    "pop(comment_stack)  # Remove comment with ID 15657\n",
    "\n",
    "# Check the remaining comments in the stack\n",
    "print(\"Remaining comments after removing the last two:\")\n",
    "while not is_empty(comment_stack):\n",
    "    print(pop(comment_stack))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc9331b5-46d8-4f96-920f-96417bda19a0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
